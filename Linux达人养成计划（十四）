Linux达人养成计划（十四）

shell编程之条件判断与流程控制

第1章 条件判断式语句

1-1 shell条件判断式语句概述

1-2 shell条件判断式语句之按文件类型判断

      流程控制语句

*条件判断式
*单分支if语句
*双分支if语句
*多分支if语句
*case语句
*for循环
*while循环和until循环

1、按照文件类型进行判断
测试选项       作用
-b文件    判断该文件是否存在，并且是否为块设备文件（是块设备文件为真）
-c文件    判断该文件是否存在,并且是否为字符设备文件（是字符设备文件为真）
-d文件    判断该文件是否存在，并且是否为目录文件（是目录为真）
-e文件    判断该文件是否存在（存在为真）
-f文件    判断该文件是否存在，并且是否为普通文件（是普通文件为真）
-L文件    判断该文件是否存在，并且是否为符号链接文件（是符号链接文件为真）
-p文件    判断该文件是否存在，并且是否为管道文件（是管道文件为真）
-s文件     判断该文件是否存在，并且是否为非空（非空为真）
-S文件     判断该文件是否存在，并且是否为套接字文件（是套接字文件为真）

     两种判断格式
#test -e /root/install.log

#[ -e /root/install.log ]

#[ -d /root ] && echo "yes" || echo "no"
*#第一个判断命令如果正确执行，则打印"yes",否则打印"no"

1-3 shell条件判断式语句之按文件权限判断

2、按照文件权限进行判断
测试选项      作用
-r 文件    判断该文件是否存在，并且是否该文件拥有读权限（有读权限为真）
-w 文件    判断该文件是否存在，并且是否该文件拥有写权限（有写权限为真）
-x 文件    判断该文件是否存在，并且该文件是否拥有执行权限（有执行权限为真）
-u 文件    判断该文件是否存在，并且该文件是否拥有SUID权限（有SUID权限为真）
-g 文件    判断给该文件是否存在，并且是否该文件拥有SGID权限（有SGID权限为真）
-k 文件    判断该文件是否存在，并且是否该文件拥有SBit权限（有SBit权限为真）

1-4 shell条件判断式语句之两个文件之间的比较

3、两个文件之间进行比较
测试选项         作用
文件1 -nt 文件2  判断文件1的修改时间是否比文件2的新（如果新则为真）
文件1 -ot 文件2  判断文件1的修改时间是否比文件2的旧（如果旧则为真）
文件1 -ef 文件   判断文件1是否和文件2的Inode号一致，可以理解为两个文件是否为同一个文件。这个判断用于判断硬链接是很好的方法

1-5 shell条件判断式语句之两个整数之间的比较

4、两个整数之间比较

测试选项         作用
整数1 -eq 整数2  判断整数1是否和整数2相等（相等为真）
整数1 -ne 整数2  判断整数1是否和整数2不相等（不相等为真）
整数1 -gt 整数2  判断整数1是否大于整数2（大于为真）
整数1 -lt 整数2	 判断整数1是否小于整数2（小于为真）
整数1 -ge 整数2  判断整数1是否大于等于整数2（大于等于为真）
整数1 -le 整数2	 判断整数1是否小于等于整数2（小于等于为真）

1-6 shell条件判断式语句之字符串之间的比较

5、字符串的判断
测试选项      作用
-z 字符串   判断字符串是否为空（为空返回真）
-n 字符串   判断字符串是佛为非空（非空返回真）
字符串1 == 字符串2  判断字符串1是否和字符串2相等（相等返回真）
字符串1 ！= 字符串2  判断字符串1是否和字符串2不相等（不相等返回真）

例如：
#aa=11
#bb=11
*#给变量aa和变量bb赋值
#["$aa" == "bb"] && echo "yes" || echo "no"
*#判断两个变量的值是否相等，明显不相等，所以返回no

1-7 shell条件判断式语句之多重条件判断

测试选项         作用
判断1-a 判断2  逻辑与，判断1和判断2都成立，最终的结果才为真
判断1-o 判断2  逻辑或，判断1和判断2有一个成立，最终的结果就成真
！判断         逻辑非，使原始的判断式取反

例如：
#aa=11
#[ -n "$aa" -a "$aa" -gt 23 ] && echo "yes" || echo	"no"
 no
 *#判断变量aa是否有值，同时判断变量aa的值是否大于23
 *#因为变量aa的值不大于23，所以虽然第一个判断值为真，返回的结果也是假

第2章 单分支if语句

2-1 shell单分支if语句概述

建立编程思想的方法：
1、熟悉Linux基本命令、规范，语法及shell语法
2、当遇到实际需求时，应用所学知识

2-2 shell单分支if语句

   单分支if条件语句

if [条件判断式];then
   程序
fi
或者
if [条件判断式]
   then
   程序
fi

单分支条件语句需要注意几点

*if语句使用fi结尾，和一般语言使用大括号结尾不同
*[条件判断式]就是使用test命令判断，所以中括号和条件判断式之间必须有空格
*then后面跟符合条件之后执行的程序，可以放在[]之后，用";"分割。也可以换行写入，就不需要“；”了

例子1:判断登录用户是否root
#!/bin/bash
test=$(env | grep "USER" | cut -d "=" -f 2)
if ["$test" == "root"]
     then
     echo "Current user is root."
fi

2-3 shell单分支if语句例：判断分区使用率

#!/bin/bash
#统计根分区使用率
rate=$(df -h | grep "/dev/sda3" | awk '{print $5}' | cut -d "%" -f 1)
#把根分区使用率作为变量值赋予变量rate

if [ $rate -ge "80" ]
then
        echo "Warning! /dev/sda3 is full!!"
fi

第三章 双分支if语句

3-1 shell双分支if语句例:判断输入的是否是一个目录

例子1：判断输入的是否是一个目录

#!/bin/bash
#判断输入的文件是否是一个目录

read -t 30 -p "Please input a directory:" dir
if [ -d "$dir" ]
      then
           echo "yes"
      else
           echo "no"
fi

3-2 shell双分支if语句之判断Apache是否启动（上）

3-3 shell双分支if语句例之判断Apache是否启动（下）

例子2：判断Apache是否启动

#!/bin/bash

test=$(ps aux | grep httpd | grep -v grep)
#截取httpd进程，并把结果赋予变量test
if [ -n "$test" ]
#如果test的值不为空，则执行then中命令
   then
      echo "$(date) httpd is ok!" >> /tmp/autostart-acc.log
   else
      /etc/rc.d/init.d/httpd start &>/dev/null
      echo "$(date) restart httpd !!" >> /tmp/autostart-err.log

fi

注意：
   脚本名称中坚决不能包含httpd，否则容易被
截取，导致脚本失效

第4章 多分支if语句

4-1 shell多分支if语句简介

多分支if条件语句

if [ 条件判断式1 ]
   then 
      当条件判断式1成立时，执行程序1
elif [ 条件判断式2 ]
   then 
      当条件判断式2成立时，执行程序2
...省略更多条件
else
      当所有条件都不成立时，最后执行此程序
fi

4-2 shell多分支if语句例：计算器

#!/bin/bash
#字符界面加减乘除计算器

read -t 30 -p "Please input num1: " num1
read -t 30 -p "Please input num2: " num2
#通过read命令接收要计算的数值，并赋予变量num1和num2
read -t 30 -p "Please input a operator: " ope
#通过read命令接收要计算的符号，并赋予变量ope

if [ -n "$num1" -a -n "$num2" -a -n "$ope" ]
#第一层判断，用来判断num1、num2和ope中都有值
        then
        test1=$(echo $num1 | sed 's/[0-9]//g')	
        test2=$(echo $num2 | sed 's/[0-9]//g')
        #定义变量test1和test2的值为$(命令)的结果
        #后续命令作用是，把变量test1的值替换为空。如果能替换为空。证明num1的值为数字
        #如果不能替换为空，证明num1的值为非数字，我们使用这种方法判断num1的值为数字
        #用同样的方法测试test2变量

        if [ -z "$test1" -a -z "$test2" ]
        #第二层判断，用来判断num1和num2为数值
        #如果变量test1和test2的值为空，则证明num1和num2是数字
                 then
                 #如果test1和test2是数字，则执行以下命令
                          if [ "$ope" == '+' ]
                          #第三层判断用来确认运算符
                          #测试变量$ope中是什么运算符
                                   then
                                   sum=$(( $num1 + $num2 ))
                                   #如果是加号则执行加法运算
                           elif [ "$ope" == '-' ]
                           	       then
                           	       sum=$(( $num1 - $num2 ))
                           	       #如果是减号，则执行减法运算
                           elif [ "$ope" == '*' ]
                           	       then
                           	       sum=$(( $num1 * $num2 ))
                           elif [ "$ope" == '/' ]
                           	       then
                           	       sum=$(( $num1 / $num2 ))
                           else
                           	       echo "Please enter a vaild symbol"
                           	       #如果运算符不匹配，提示输入有效的符号
                           	       exit 10
                           	       #并退出程序，返回错误代码10
                          fi
                          else
                          #如果test1和test不是数值
                                 echo "Please enter a vaild value"
                                 #则提示输入有效的数值
                                 exit 11
        fi
else
	    echo "qing shuru neirong"
	    exit 12
fi
echo " $num1 $ope $num2 : $sum"              
#输出数值运算的结果

4-3 shell多分支if语句例：判断用户输入的是什么文件

例子1：判断用户输入的是什么文件
#!/bin/bash
#判断用户输入的是什么文件

read -t 30 -p "Please input a filename: " file
#接收键盘的输入，并赋予变量file

if [ -z "$file" ]
#判断file变量是否为空
     then
     	echo "Error,please input a filename"
     	exit 1
elif [ ! -e "$file" ]
#判断file的值是否存在
      then
      	echo "Your input is not a file!"
      	exit 2
elif [ -f "$file" ]
#判断file的值是否为普通文件
      then
      	echo "$file is a regulare file!"
elif [ -d "$file" ]
#判断file的值是否为目录文件
      then
      	echo "$file is a directory!"
else
	    echo "$file is an other file!"
fi

第5章 多分支case语句

5-1 shell多分支case语句

多分支case条件语句

*case语句和if...elif...else语句一样都是多分支条件语句，不过和if多分支条件语句不同的是，case语句只能判断一种条件关系，而if语句可以判断多种条件关系。
case $变量名 in 
  "值1")
      如果变量的值等于值1，则执行程序1
      ;;
  "值2")
      如果变量的值等于值2，则执行程序2
      ;;
   ...省略其他分支...
   *)
      如果变量的值都不是以上的值，则执行此程序
;;
esac

例如：
#！/bin/bash
#判断用户输入
read -t 30  -p "Please choose yes/no: " cho
case $cho in 
	    "yes")
                echo "Your choose is yes!"
                ;;
        "no")
                echo "Your choose is no!"
                ;;
        *)
                echo "Your choose is error!"
                ;;
esac

#!/bin/bash
echo "fengjie : qing shuru 1"
echo "furong : qing shuru 2"
echo "boduo : qing shuru 3"

read -t 30 -p "qing shuru xuanze: " cho

case "$cho" in
	    "1")
               echo "fengjie jia gei ni"
               ;;
        "2")
               echo "furong jia gei ni"
               ;;
        "3")
               echo "boduo he wo zuo"
               ;;
        *)
               echo "qing shu ru zhengque"
               ;;
esac

第6章 for循环

6-1 for循环

       语法一

for 变量in 值1 值2 值3...
  do
  	  程序
  done

例子：
#!/bin/bash

for i in 1 2 3 4 5
       do
       	       echo $i
       done

例子1：
#!/bin/bash
#批量解压缩脚本
cd /root/test/
ls *.tar.gz > ls.log
ls *.tgz >> ls.log

for i in $( cat ls.log )
        do
        	    tar -zxf $i & > /dev/null
        done
 rm -rf ls.log

6-2 例：批量添加删除指定数量的用户

     语法二

for((初始值;循环控制条件;变量变化))
  do
  	程序
  done

例子：
#!/bin/bash
#从1加到100

s=0
for (( i=1;i<=100;i=i+1 ))
        do
     	        s=$(( $s+$i ))
        done
echo "The sum of 1+2+...+100 is:$s"

例子：
#!/bin/bash
#批量添加指定数量的用户
read -t 30 -p "Please input user name: " name
read -t 30 -p "Please input the number of users: " num
read -t 30 -p "Please input the password of users: " password
if [ ! -z "$name" -a ! -z "$num" -a ! -z "$pass" ]
       then
       y=$(echo $num | sed 's/[0-9]//g')
               if [ -z "$y" ]
       	       then
       	       for (( i=1;i<=$num;i=i+1 ))
       	     	   do
       	     	   	   /usr/sbin/useradd $name$i & > /dev/null
       	     	   	   echo $pass | /usr/bin/passwd --stdin $name$i & > /dev/null
       	     	   done
       fi	     	  
fi          

#!/bin/bash
#批量删除除了root以外的用户

for i in $(cat /etc/passwd | grep /bin/bash | grep -v root | cut -d ":" -f1)
        do
                userdel -r $i
        done

第7章 while循环和until循环

7-1 while循环和until循环

     1、while循环
*while循环是不定循环，也称作条件循环。只要条件判断式成立，循环就会一直继续，直到条件判断式不成立，循环才会停止。这就和for的固定循环不太一样了。

例子：
#!/bin/bash
#从1加到100
i=1
s=0
while [ $i -le 100 ]
#如果变量i的值小于等于100，则执行循环
        do
                   s=$(( $s+$i ))
                   i=$(( $i+1 ))
        done
echo "The sum is: $s"

       2、until循环
*until循环，和while循环相反，unti循环时只要条件判断式不成立则进行循环，并执行循环程序。一旦循环条件成立，则终止循环。
例子：
#!/bin/bash
#从1加到100
i=1
s=0
until [ $i -gt 100 ]
#循环直到变量i的值大于100，就停止循环
         do
                   s=$(( $s+$i ))
                   i=$(( $i+1 ))
         done
echo "The sum is: $s"
