Linux达人养成计划（十三）

shell编程之正则表达式

第1章 正则表达式

1-1 什么是正则表达式

正则表达式

一、正则表达式
二、字符截取命令

1、正则表达式是什么

*正则表达式是用于描述字符排列和匹配模式的一种语法规则。它主要用于字符串的模式分割、匹配、查找及替换操作。

1-2 shell编程之正则表达式与通配符

2、正则表达式与通配符

*正则表达式用来在文件中匹配符合条件的字符串，正则是包含匹配。grep、awk、sed等命令可以支持正则表达式。
*通配符用来匹配符合条件的文件名，通配符是完全匹配。ls、find、cp这些命令不支持正则表达式，所以只能使用shell自己的通配符来进行匹配了。

*通配符
  -*     匹配任意内容
  -？    匹配任意一个内容
  -[]    匹配中包括的一个字符

1-3 shell编程之基础正则表达式1

3、基础正则表达式

元字符             作用
*        前一个字符匹配0次或任意多次。
.        匹配除了换行符外任意一个字符
^        匹配行首。例如：^hello会匹配以hello开头的行。
$        匹配行尾。例如：hello&会匹配以hello结尾的行
[]       匹配中括号中指定的任意一个字符，只匹配一个字符。
         例如：[aoeiu]匹配任意一个元音字符，[0-9]匹配任意一个数字，
         [a-z][0-9]匹配小写字和一个数字构成的两个字符。
[^]      匹配除中括号的字符以外的任意一个字符。例如：[^0-9]匹配任意一位非数字字符，
         [^a-z]表示任意一位非小写字母
\        转义符。用于取消特殊符号的含义
\{n\}    表示其前面的字符恰好出现n次。例如：[0-9]\{4\}匹配4位数字，[1][3-8][0-9]\{9\}匹配手机号码
\{n,\}   表示其前面的字符出现不小于n次。例如：[0-9]\{2,\}表示两位及以上的数字。
\{n,m\}  表示其前面的字符至少出现n次，最多出现m次。例如：[a-z]\{6,8\}匹配6到8位的小写字母

"*"前一个字符匹配0次，或任意多次
*"a*"
*#匹配所有内容，包括空白行
*"aa*"
*#匹配至少包含有一个a的行
*"aaa*"
*#匹配最少包含两个连续a的字符串
*"aaaaa*"
*#则会匹配最少包含四个个连续a的字符串

1-4 shell编程之基础正则表达式2

1-5 shell编程之基础正则表达式3

"\"转义符
*"\.$"
*#匹配使用"."结尾的行

1-6 shell编程之正则表达式案例

*[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}
#匹配日期格式YYYY-MM-DD
*[0-9]\{1,3\}\. [0-9]\{1,3\}\. [0-9]\{1,3\}\. [0-9]\{1,3\}\
#匹配IP地址

第2章 字符截取命令

2-1 shell字符截取命令之cut

#cut [选项] 文件名
*选项：
  -f 列号：提取第几列
  -d 分隔符：按照指定分隔符分割列

例如：#vim /etc/passwd
ID      Name    gender  Mark
1       furong  F       85
2       fengj   F       60
3       cang    F       70

#cut -f 2 student.txt
*截取第二列Name列
#cut -f 2,4 student.txt
*截取第二列Name列和第四列Mark列
#cut -d ":" -f 1,3 /etc/passwd

局限性：
只适合用于包含简单的制表符和分隔符

2-2 shell字符截取命令之printf命令

#printf '输出类型输出格式'  输出内容
*输出类型：
  -%ns:  输出字符串。n是数字指代输出几个字符
  -%ni:输出整数。n是数字指代输出几个数字
  -%m.nf:输出浮点数。m和n是数字，指代输出的整数位数和小数位数如%8.2f代表共输出8位数，其中2位是小数，6位是整数。

*输出格式：
  - \a:输出警告声音
  - \b:输出退格键，也就是Backspace键
  - \f:清除屏幕
  - \n:换行
  - \r:回车，也就是Enter键
  - \t:水平输出退格键，也就是Tab键
  - \v:垂直输出退格键，也就是Tab键

#printf '%s' $(cat student.txt)
*#不调整输出格式
#printf '%s\t%s\t%s\t%s\n' $(cat student.txt)
*#调整格式输出

2-3 shell字符截取命令之awk命令（上）

#awk '条件1{动作1}条件2{动作2}...' 文件名
*条件（Pattern）：
  - 一般使用关系表达式作为条件
  - x > 10判断变量x是否大于10
  - x >= 10大于等于
  - x <= 10小于等于
*动作（Action）：
  - 格式化输出
  - 流程控制语句

例如：
#vi student.txt
ID		Name       gender     Mark
1      furong       F          85
2      fengj        F          60
3      cang         F          70

#awk '{printf $2 "\t" $4 "\n"}' student.txt
#df -h | awk '{print $1 "\t" $3}'

2-4 shell字符截取命令之awk命令（下）

   BEGIN
# awk 'BEGIN{print "This is a transcript\n"}{printf $2 "\t" $4 "\n"}' student.txt

   END
#awk 'END{print "The End \n"}{printf $2 "\t" $4 "\n"}' student.txt

   FS内置变量
#cat /etc/passwd | grep "/bin/bash" | awk 'BEGIN {FS=":"} {printf $1 "\t" $3 "\n"}'

   关系运算符
#cat student.txt | grep -v Name | awk '$4 >= 70 {printf $2 "\n"}'

2-5 shell字符截取命令之sed命令（上）

    sed命令

*sed是一种几乎包含在所有UNIX平台（包括Linux）的轻量级流编辑器。sed主要是用来将数据进行选取、替换、删除、新增的命令。

#sed [选项] '[动作]' 文件名
*选项：
  - -n: 一般sed命令会把所有数据都输出到屏幕，如果加入此选择，则是会把经过sed命令处理的行输出到屏幕。
  - -e: 允许对输入数据应用多条sed命令编辑
  - -i:用sed的修改结果直接修改读取数据的文件，而不是由屏幕输出
*动作：
  - a:追加，在当前行后添加一行或多行
  - c:行替换，用c后面的字符串替换原数据行
  - i:插入，在当前行前插入一行或多行。d:删除，删除指定的行
  - p:打印，输出指定的行。
  - s:字串替换，用一个字符串替换另外一个字符串。	格式为“行范围s/旧字串/新字串/g"(和vim中的替换格式类似)。

还是以student.txt为例：
行数据操作
#sed '2p' student.txt
*#查看文件的第二行
#sed -n '2p' student.txt

2-6 shell字符截取命令之sed命令（下）

#sed '2,4d' student.txt
*#删除第二行到第四行的数据，但不修改文件本身
#sed '2a piaoliang jiushi renxing' student.txt
*#在第二行后追加hello
#sed '2i mienv' student.txt
*#在第二行前插入两行数据
#sed '2c furong bu ji ge' student.txt
*#数据替换

  字符串替换

#sed 's/旧字串/新字串/g' 文件名
#sed '3s/60/99/g' student.txt
*#在第三行中，把60换成99
#sed -i '3s/60/99/g' student.txt
*#sed操作的数据直接写入文件
#sed -e 's/fengi//g ; s/cang //g' student.txt
*#同时把“fengj"和"cang"替换为空

第3章 字符处理命令

3-1 shell字符处理命令之字符处理命令

1、排序命令sort
*sort [选择] 文件名
*选项：
  - -f:忽略大小写
  - -n:以数值型进行【排序，默认使用字符串型排序
  - -r:反向排序
  - -t:指定分隔符，默认的分隔符是制表符
  - -k n[,m]:按照指定的字段范围排序。从第n字段开始，m字段结束（默认到行尾）

例如：
#sort /etc/passwd
*#排序用户信息文件
#sort -r /etc/passwd
*#反向排序
#sort -t ":" -k 3,3 /etc/passwd
*#指定分隔符是“：”，用第三字段开头，第三字段结尾排序，就是只用第三字段排序
#sort -n -t ":" -k 3,3 /etc/passwd

2、统计命令wc
#wc [选项] 文件名
*选项：
  - -l:只统计行数
  - -w:只统计单词数
  - -m:只统计字符数
